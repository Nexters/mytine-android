apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
androidExtensions {
    experimental = true
}
apply plugin: 'kotlin-kapt'
kapt {
    correctErrorTypes = true
}
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'dagger.hilt.android.plugin'
apply from: '../versioning.gradle'
apply from: teamConfig('git/git-hooks.gradle')
apply from: teamConfig('staticCodeAnalysis/ktlint.gradle')
apply from: teamConfig('staticCodeAnalysis/detekt.gradle')
if (jacocoEnabled.toBoolean()) {
    apply from: '../jacoco.gradle'
}
android {
    compileSdkVersion rootProject.ext.compile_sdk_version

    defaultConfig {
        applicationId "com.nexters.mytine"
        minSdkVersion rootProject.ext.min_sdk_version
        targetSdkVersion rootProject.ext.target_sdk_version
        versionCode buildVersionCode()
        versionName buildVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"
                ]
            }
        }

        multiDexEnabled true
    }

    lintOptions {
        checkReleaseBuilds false
        checkDependencies true
        ignoreTestSources true
    }

    buildFeatures {
        dataBinding true
    }

    hilt {
        enableTransformForLocalTests = true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        ide {
            storeFile file("../keystore/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    packagingOptions {
        exclude 'META-INF/*.version'
        exclude 'META-INF/proguard/*'
        exclude '/*.properties'
        exclude 'META-INF/*.properties'
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.ide
            applicationIdSuffix ".debug"

            debuggable true
            zipAlignEnabled false
            minifyEnabled false

            testCoverageEnabled jacocoEnabled.toBoolean()
        }

        beta {
            signingConfig signingConfigs.ide
            applicationIdSuffix ".beta"

            debuggable true
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            crunchPngs true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            proguardFiles file('../proguard').listFiles()
        }
        release {
            signingConfig null

            debuggable false
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            crunchPngs true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            proguardFiles file('../proguard').listFiles()
        }
    }

    sourceSets {
        main {
            assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$desugar_jdk_libs_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.fragment:fragment:$fragment_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"
    implementation "androidx.annotation:annotation:$annotation_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.viewpager2:viewpager2:$viewpager2_version"
    implementation "com.airbnb.android:lottie:$lottie_version"
    implementation "me.relex:circleindicator:$circle_indicator_version"


    kapt "androidx.databinding:databinding-compiler:$android_gradle_version"

    // Ktx
    implementation "androidx.core:core-ktx:$ktx_version"

    // Coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
    implementation "com.github.akarnokd:kotlin-flow-extensions:$flow_extensions_version"

    // DI
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "androidx.hilt:hilt-common:$dagger_hilt_version"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$dagger_hilt_version"
    implementation "com.google.dagger:hilt-android:$dagger_hilt_android_version"
    testImplementation "com.google.dagger:hilt-android-testing:$dagger_hilt_android_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "androidx.hilt:hilt-compiler:$dagger_hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$dagger_hilt_android_version"
    kaptTest "com.google.dagger:dagger-compiler:$dagger_version"
    kaptTest "androidx.hilt:hilt-compiler:$dagger_hilt_version"
    kaptTest "com.google.dagger:hilt-android-compiler:$dagger_hilt_android_version"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"

    // Inset
    implementation "dev.chrisbanes:insetter-ktx:$insetter_version"
    implementation "dev.chrisbanes:insetter-dbx:$insetter_version"

    // Emoji
    implementation "com.vanniktech:emoji-ios:$emoji_version"

    // FlexBox
    implementation "com.google.android:flexbox:$flexbox_version"

    // Dialog
    implementation "com.afollestad.material-dialogs:core:$material_dialog_version"

    // Debug
    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation "com.facebook.stetho:stetho:$stetho_version"

    // Test
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_version"
    testImplementation "androidx.test.ext:junit:$test_ext_junit_version"
    testImplementation "androidx.arch.core:core-testing:$arch_testing_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrest_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "com.google.truth:truth:$truth_version"
}